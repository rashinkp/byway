import { UpdateUserRequestDto, UserWithProfileResponseDto } from "../../../dtos/user.dto";
import { User } from "../../../../domain/entities/user.entity";
import { UserProfile } from "../../../../domain/entities/user-profile.entity";
import { Role } from "../../../../domain/enum/role.enum";
import { HttpError } from "../../../../presentation/http/errors/http-error";
import { IUserRepository } from "../../../repositories/user.repository";
import { IUpdateUserUseCase } from "../interfaces/update-user.usecase.interface";
import { S3ServiceInterface } from "../../../providers/s3.service.interface";

export class UpdateUserUseCase implements IUpdateUserUseCase {
  constructor(
    private userRepository: IUserRepository,
    private s3Service: S3ServiceInterface
  ) {}

  async execute(
    dto: UpdateUserRequestDto,
    userId: string
  ): Promise<UserWithProfileResponseDto> {
    const user = await this.userRepository.findById(userId);
    if (!user) {
      throw new HttpError("User not found", 404);
    }

    if (
      dto.avatar &&
      user.avatar &&
      dto.avatar !== user.avatar &&
      user.avatar.includes(".s3.")
    ) {
      try {
        await this.s3Service.deleteFile(user.avatar);
        console.log("[Deleted] deleted old avatar");
      } catch (err) {
        console.error("Failed to delete old avatar from S3:", err);
      }
    }

    // Update user using domain methods
    if (dto.name) user.updateProfile({ name: dto.name });
    if (dto.avatar) user.updateProfile({ avatar: dto.avatar });
    if (dto.role) user.changeRole(dto.role as Role);

    let profile = await this.userRepository.findProfileByUserId(userId);
    if (!profile) {
      // Create new profile using constructor
      profile = new UserProfile({
        id: "", // Will be generated by database
        userId,
        bio: dto.bio,
        education: dto.education,
        skills: dto.skills,
        phoneNumber: dto.phoneNumber,
        country: dto.country,
        city: dto.city,
        address: dto.address,
        dateOfBirth: dto.dateOfBirth ? new Date(dto.dateOfBirth) : undefined,
        gender: dto.gender,
        createdAt: new Date(),
        updatedAt: new Date(),
      });
      profile = await this.userRepository.createProfile(profile);
    } else {
      // Update existing profile using constructor
      profile = new UserProfile({
        id: profile.id,
        userId: profile.userId,
        bio: dto.bio ?? profile.bio,
        education: dto.education ?? profile.education,
        skills: dto.skills ?? profile.skills,
        phoneNumber: dto.phoneNumber ?? profile.phoneNumber,
        country: dto.country ?? profile.country,
        city: dto.city ?? profile.city,
        address: dto.address ?? profile.address,
        dateOfBirth: dto.dateOfBirth ? new Date(dto.dateOfBirth) : profile.dateOfBirth,
        gender: dto.gender ?? profile.gender,
        createdAt: profile.createdAt,
        updatedAt: new Date(),
      });
      profile = await this.userRepository.updateProfile(profile);
    }

    const savedUser = await this.userRepository.updateUser(user);

    // Transform to response DTO
    return {
      user: {
        id: savedUser.id,
        name: savedUser.name,
        email: savedUser.email.address,
        avatar: savedUser.avatar,
        role: savedUser.role,
        isActive: !savedUser.isDeleted(),
        createdAt: savedUser.createdAt,
        updatedAt: savedUser.updatedAt,
      },
      profile: profile ? {
        id: profile.id,
        userId: profile.userId,
        bio: profile.bio,
        education: profile.education,
        skills: profile.skills,
        phoneNumber: profile.phoneNumber,
        country: profile.country,
        city: profile.city,
        address: profile.address,
        dateOfBirth: profile.dateOfBirth,
        gender: profile.gender,
        createdAt: profile.createdAt,
        updatedAt: profile.updatedAt,
      } : null,
    };
  }
}
