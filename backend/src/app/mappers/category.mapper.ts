import { CategoryRecord } from "../records/category.record";
import {
  CreateCategoryRequestDto,
  UpdateCategoryRequestDto,
  CategoryResponseDto,
  CategoryListResponseDto,
} from "../dtos/category.dto";

export class CategoryMapper {
  // Record to Response DTOs
  static toCategoryResponseDto(categoryRecord: CategoryRecord, additionalData?: {
    courseCount?: number;
    isActive?: boolean;
  }): CategoryResponseDto {
    return {
      id: categoryRecord.id,
      name: categoryRecord.name,
      description: categoryRecord.description || undefined,
      icon: categoryRecord.icon || undefined,
      color: categoryRecord.color || undefined,
      createdAt: categoryRecord.createdAt,
      updatedAt: categoryRecord.updatedAt,
      deletedAt: categoryRecord.deletedAt || undefined,
      courseCount: additionalData?.courseCount || 0,
      isActive: additionalData?.isActive ?? !categoryRecord.deletedAt,
    };
  }

  static toCategoryListResponseDto(
    categoryRecords: CategoryRecord[],
    total: number,
    totalPages: number,
    additionalData?: {
      courseCount?: number;
      isActive?: boolean;
    }[]
  ): CategoryListResponseDto {
    const categories = categoryRecords.map((categoryRecord, index) =>
      this.toCategoryResponseDto(categoryRecord, additionalData?.[index])
    );

    return {
      categories,
      total,
      totalPages,
    };
  }

  // Request DTOs to Record
  static fromCreateCategoryRequestDto(dto: CreateCategoryRequestDto): CategoryRecord {
    return {
      id: "", // Will be generated by database
      name: dto.name,
      description: dto.description,
      icon: dto.icon,
      color: dto.color,
      createdAt: new Date(),
      updatedAt: new Date(),
      deletedAt: null,
    };
  }

  static fromUpdateCategoryRequestDto(dto: UpdateCategoryRequestDto, existingRecord: CategoryRecord): CategoryRecord {
    return {
      ...existingRecord,
      name: dto.name ?? existingRecord.name,
      description: dto.description ?? existingRecord.description,
      icon: dto.icon ?? existingRecord.icon,
      color: dto.color ?? existingRecord.color,
      updatedAt: new Date(),
    };
  }
} 