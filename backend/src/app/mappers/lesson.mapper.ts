import { LessonRecord } from "../records/lesson.record";
import { LessonContentRecord } from "../records/lesson-content.record";
import {
  CreateLessonRequestDto,
  UpdateLessonRequestDto,
  LessonResponseDto,
  LessonWithContentResponseDto,
  LessonListResponseDto,
} from "../dtos/lesson.dto";

export class LessonMapper {
  // Record to Response DTOs
  static toLessonResponseDto(lessonRecord: LessonRecord, additionalData?: {
    progress?: number;
    isCompleted?: boolean;
    duration?: string;
    contentCount?: number;
  }): LessonResponseDto {
    return {
      id: lessonRecord.id,
      title: lessonRecord.title,
      description: lessonRecord.description || undefined,
      courseId: lessonRecord.courseId,
      order: lessonRecord.order,
      duration: lessonRecord.duration,
      status: lessonRecord.status,
      createdAt: lessonRecord.createdAt,
      updatedAt: lessonRecord.updatedAt,
      deletedAt: lessonRecord.deletedAt || undefined,
      progress: additionalData?.progress || 0,
      isCompleted: additionalData?.isCompleted || false,
      formattedDuration: additionalData?.duration,
      contentCount: additionalData?.contentCount || 0,
    };
  }

  static toLessonWithContentResponseDto(
    lessonRecord: LessonRecord,
    lessonContentRecord: LessonContentRecord | null,
    additionalData?: {
      progress?: number;
      isCompleted?: boolean;
      duration?: string;
    }
  ): LessonWithContentResponseDto {
    return {
      id: lessonRecord.id,
      title: lessonRecord.title,
      description: lessonRecord.description || undefined,
      courseId: lessonRecord.courseId,
      order: lessonRecord.order,
      duration: lessonRecord.duration,
      status: lessonRecord.status,
      createdAt: lessonRecord.createdAt,
      updatedAt: lessonRecord.updatedAt,
      deletedAt: lessonRecord.deletedAt || undefined,
      content: lessonContentRecord ? {
        id: lessonContentRecord.id,
        lessonId: lessonContentRecord.lessonId,
        type: lessonContentRecord.type,
        title: lessonContentRecord.title,
        content: lessonContentRecord.content,
        videoUrl: lessonContentRecord.videoUrl || undefined,
        thumbnail: lessonContentRecord.thumbnail || undefined,
        resourceUrl: lessonContentRecord.resourceUrl || undefined,
        createdAt: lessonContentRecord.createdAt,
        updatedAt: lessonContentRecord.updatedAt,
      } : null,
      progress: additionalData?.progress || 0,
      isCompleted: additionalData?.isCompleted || false,
      formattedDuration: additionalData?.duration,
    };
  }

  static toLessonListResponseDto(
    lessonRecords: LessonRecord[],
    total: number,
    totalPages: number,
    additionalData?: {
      progress?: number;
      isCompleted?: boolean;
      duration?: string;
      contentCount?: number;
    }[]
  ): LessonListResponseDto {
    const lessons = lessonRecords.map((lessonRecord, index) =>
      this.toLessonResponseDto(lessonRecord, additionalData?.[index])
    );

    return {
      lessons,
      total,
      totalPages,
    };
  }

  // Request DTOs to Record
  static fromCreateLessonRequestDto(dto: CreateLessonRequestDto): LessonRecord {
    return {
      id: "", // Will be generated by database
      title: dto.title,
      description: dto.description,
      courseId: dto.courseId,
      order: dto.order,
      duration: dto.duration,
      status: dto.status,
      createdAt: new Date(),
      updatedAt: new Date(),
      deletedAt: null,
    };
  }

  static fromUpdateLessonRequestDto(dto: UpdateLessonRequestDto, existingRecord: LessonRecord): LessonRecord {
    return {
      ...existingRecord,
      title: dto.title ?? existingRecord.title,
      description: dto.description ?? existingRecord.description,
      order: dto.order ?? existingRecord.order,
      duration: dto.duration ?? existingRecord.duration,
      status: dto.status ?? existingRecord.status,
      updatedAt: new Date(),
    };
  }

  static fromCreateLessonRequestDtoToContent(dto: CreateLessonRequestDto): LessonContentRecord | null {
    if (!dto.content) return null;

    return {
      id: "", // Will be generated by database
      lessonId: "", // Will be set after lesson creation
      type: dto.content.type,
      title: dto.content.title,
      content: dto.content.content,
      videoUrl: dto.content.videoUrl,
      thumbnail: dto.content.thumbnail,
      resourceUrl: dto.content.resourceUrl,
      createdAt: new Date(),
      updatedAt: new Date(),
    };
  }

  static fromUpdateLessonRequestDtoToContent(dto: UpdateLessonRequestDto, existingContent: LessonContentRecord | null): LessonContentRecord | null {
    if (!dto.content) return existingContent;

    if (!existingContent) {
      return {
        id: "",
        lessonId: dto.id,
        type: dto.content.type,
        title: dto.content.title,
        content: dto.content.content,
        videoUrl: dto.content.videoUrl,
        thumbnail: dto.content.thumbnail,
        resourceUrl: dto.content.resourceUrl,
        createdAt: new Date(),
        updatedAt: new Date(),
      };
    }

    return {
      ...existingContent,
      type: dto.content.type ?? existingContent.type,
      title: dto.content.title ?? existingContent.title,
      content: dto.content.content ?? existingContent.content,
      videoUrl: dto.content.videoUrl ?? existingContent.videoUrl,
      thumbnail: dto.content.thumbnail ?? existingContent.thumbnail,
      resourceUrl: dto.content.resourceUrl ?? existingContent.resourceUrl,
      updatedAt: new Date(),
    };
  }
} 