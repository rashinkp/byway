import { UserRecord } from "../records/user.record";
import { UserProfileRecord } from "../records/user-profile.record";
import {
  CreateUserProfileRequestDto,
  UpdateUserProfileRequestDto,
  UpdateUserRequestDto,
  UserResponseDto,
  UserProfileResponseDto,
  UserWithProfileResponseDto,
  UserStatsResponseDto,
  TopInstructorResponseDto,
} from "../dtos/user.dto";

export class UserMapper {
  // Record to Response DTOs
  static toUserResponseDto(userRecord: UserRecord): UserResponseDto {
    return {
      id: userRecord.id,
      name: userRecord.name,
      email: userRecord.email,
      avatar: userRecord.avatar || undefined,
      role: userRecord.role,
      isActive: !userRecord.deletedAt,
      createdAt: userRecord.createdAt,
      updatedAt: userRecord.updatedAt,
    };
  }

  static toUserProfileResponseDto(profileRecord: UserProfileRecord): UserProfileResponseDto {
    return {
      id: profileRecord.id,
      userId: profileRecord.userId,
      bio: profileRecord.bio || undefined,
      education: profileRecord.education || undefined,
      skills: profileRecord.skills || undefined,
      phoneNumber: profileRecord.phoneNumber || undefined,
      country: profileRecord.country || undefined,
      city: profileRecord.city || undefined,
      address: profileRecord.address || undefined,
      dateOfBirth: profileRecord.dateOfBirth || undefined,
      gender: profileRecord.gender || undefined,
      createdAt: profileRecord.createdAt,
      updatedAt: profileRecord.updatedAt,
    };
  }

  static toUserWithProfileResponseDto(
    userRecord: UserRecord,
    profileRecord: UserProfileRecord | null
  ): UserWithProfileResponseDto {
    return {
      user: this.toUserResponseDto(userRecord),
      profile: profileRecord ? this.toUserProfileResponseDto(profileRecord) : null,
    };
  }

  static toUserStatsResponseDto(stats: {
    totalUsers: number;
    activeUsers: number;
    inactiveUsers: number;
    verifiedUsers: number;
    instructors: number;
    students: number;
  }): UserStatsResponseDto {
    return {
      totalUsers: stats.totalUsers,
      activeUsers: stats.activeUsers,
      inactiveUsers: stats.inactiveUsers,
      totalInstructors: stats.instructors,
      totalAdmins: 0, // This would need to be calculated separately
    };
  }

  static toTopInstructorResponseDto(
    userRecord: UserRecord,
    additionalData: {
      totalCourses: number;
      totalStudents: number;
      totalRevenue: number;
      rating: number;
    }
  ): TopInstructorResponseDto {
    return {
      id: userRecord.id,
      name: userRecord.name,
      email: userRecord.email,
      avatar: userRecord.avatar || undefined,
      totalCourses: additionalData.totalCourses,
      totalStudents: additionalData.totalStudents,
      totalRevenue: additionalData.totalRevenue,
      rating: additionalData.rating,
    };
  }

  // Request DTOs to Record
  static fromUpdateUserRequestDto(dto: UpdateUserRequestDto, existingUserRecord: UserRecord): UserRecord {
    return {
      ...existingUserRecord,
      name: dto.name ?? existingUserRecord.name,
      avatar: dto.avatar ?? existingUserRecord.avatar,
      role: dto.role ?? existingUserRecord.role,
      updatedAt: new Date(),
    };
  }

  static fromCreateUserProfileRequestDto(dto: CreateUserProfileRequestDto): UserProfileRecord {
    return {
      id: "", // Will be generated by database
      userId: dto.userId,
      bio: dto.bio,
      education: dto.education,
      skills: dto.skills,
      phoneNumber: dto.phoneNumber,
      country: dto.country,
      city: dto.city,
      address: dto.address,
      dateOfBirth: dto.dateOfBirth,
      gender: dto.gender as "MALE" | "FEMALE" | "OTHER" | null,
      createdAt: new Date(),
      updatedAt: new Date(),
    };
  }

  static fromUpdateUserProfileRequestDto(dto: UpdateUserProfileRequestDto, existingProfileRecord: UserProfileRecord): UserProfileRecord {
    return {
      ...existingProfileRecord,
      bio: dto.bio ?? existingProfileRecord.bio,
      education: dto.education ?? existingProfileRecord.education,
      skills: dto.skills ?? existingProfileRecord.skills,
      phoneNumber: dto.phoneNumber ?? existingProfileRecord.phoneNumber,
      country: dto.country ?? existingProfileRecord.country,
      city: dto.city ?? existingProfileRecord.city,
      address: dto.address ?? existingProfileRecord.address,
      dateOfBirth: dto.dateOfBirth ?? existingProfileRecord.dateOfBirth,
      gender: dto.gender as "MALE" | "FEMALE" | "OTHER" | null ?? existingProfileRecord.gender,
      updatedAt: new Date(),
    };
  }

  static fromUpdateUserRequestDtoToProfile(dto: UpdateUserRequestDto, existingProfileRecord: UserProfileRecord | null): UserProfileRecord | null {
    if (!existingProfileRecord) {
      return null; // Profile doesn't exist, can't update
    }

    return {
      ...existingProfileRecord,
      bio: dto.bio ?? existingProfileRecord.bio,
      education: dto.education ?? existingProfileRecord.education,
      skills: dto.skills ?? existingProfileRecord.skills,
      phoneNumber: dto.phoneNumber ?? existingProfileRecord.phoneNumber,
      country: dto.country ?? existingProfileRecord.country,
      city: dto.city ?? existingProfileRecord.city,
      address: dto.address ?? existingProfileRecord.address,
      dateOfBirth: dto.dateOfBirth ? new Date(dto.dateOfBirth) : existingProfileRecord.dateOfBirth,
      gender: dto.gender as "MALE" | "FEMALE" | "OTHER" | null ?? existingProfileRecord.gender,
      updatedAt: new Date(),
    };
  }
} 